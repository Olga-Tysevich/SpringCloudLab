#  This configuration file will control how the Prometheus server runs.
#    - scrape interval / timeout controls - how often Prometheus will scrape metrics from your Spring Boot applications.
#    - scrape_configs - define details specific to different applications.
#    - job_name - is an arbitrary/descriptive value.
#    - metrics_path - defines the path where metrics in prometheus format can be found. Previously, we found them at server:port/actuator/prometheus
#    - static_configs - allows us to list the different applications we want Prometheus to monitor.
#    - targets - lists the different URLs. Note that this is an array, allowing a single application to have multiple instances running.
#    The host.docker.internal targets are used instead of localhost.
#       This is only necessary because we will be running Prometheus in a Docker container,
#       and its localhost definition refers to the container, not the underlying machine.
#       (If you install and run Prometheus without Docker, you should use localhost.)
#    Optionally, labels.application provides a display name for this application.
#       In our case, we configured our monitored applications to create an "application" tag for each metric, so we don't need to identify each application here.

global:
  scrape_interval: 20s
  scrape_timeout: 10s
  evaluation_interval: 1m

scrape_configs:
  - job_name: 'spring-applications'
    metrics_path: '/actuator/prometheus'
    scrape_interval: 3s # This can be adjusted based on our needs
    static_configs:
      - targets: [ 'host.docker.internal:8001' ]
      - targets: [ 'host.docker.internal:8002' ]

  #  The services job tells Prometheus to dynamically register clients found in Eureka. The "relabel" entry tells Prometheus to scrape
  #  the actuator-provided endpoint rather than /metrics or some other path:
  - job_name: 'services'
    eureka_sd_configs:
      - server: http://host.docker.internal:8010/eureka
    relabel_configs:
      - target_label: __metrics_path__
        replacement: /actuator/prometheus

  #  To be complete, we should monitor the Prometheus, Grafana, and Eureka services themselves (Yes, Prometheus can scrape metrics from itself).
  #  Unfortunately, these cannot be easily implemented with service discovery, so we will hard-code these URLs
  #  Since our Eureka application is actually a Spring Boot application, prometheus metrics are available at /actuator/prometheus
  #  The labels.application will clearly delineate the Prometheus and Grafana metrics on the Grafana dashboard. The Spring Boot-based applications
  #  do not require this as we configured them to emit an "application" tag on each metric. Ultimately these will display at the top of the Grafana dashboard.
  - job_name: 'eureka-server'
    metrics_path: '/actuator/prometheus'
    static_configs:
      - targets: [ 'host.docker.internal:8761' ]

  - job_name: 'prometheus-and-grafana'
    metrics_path: '/metrics'
    static_configs:
      - targets: [ 'host.docker.internal:9090' ]
        labels:
          application: 'Prometheus'
      - targets: [ 'host.docker.internal:3000' ]
        labels:
          application: 'Grafana'